#+TITLE: Trebuchet?! The program

* Задача. Ч1.
[[https://adventofcode.com/2023/day/1][Ссылка на задачу]]

Something is wrong with global snow production, and you've been
selected to take a look. The Elves have even given you a map; on it,
they've used stars to mark the top fifty locations that are likely to
be having problems.

You've been doing this long enough to know that to restore snow
operations, you need to check all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available
on each day in the Advent calendar; the second puzzle is unlocked when
you complete the first. Each puzzle grants one star. Good luck!

You try to ask why they can't just use a weather machine ("not
powerful enough") and where they're even sending you ("the sky") and
why your map looks mostly blank ("you sure ask a lot of questions")
and hang on did you just say the sky ("of course, where do you think
snow comes from") when you realize that the Elves are already loading
you into a trebuchet ("please hold still, we need to strap you in").

As they're making the final adjustments, they discover that their
calibration document (your puzzle input) has been amended by a very
young Elf who was apparently just excited to show off her art
skills. Consequently, the Elves are having trouble reading the values
on the document.

The newly-improved calibration document consists of lines of text;
each line originally contained a specific calibration value that the
Elves now need to recover. On each line, the calibration value can be
found by combining the first digit and the last digit (in that order)
to form a single two-digit number.

For example:

#+begin_example
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
#+end_example

In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.

Consider your entire calibration document. What is the sum of all of the calibration values?

[[file:inputs/1/input][Файл с входными данными]]

** Решение
#+begin_src scheme :noweb yes :padline yes
  <<прочитать файл>>
  <<рассчитать сумму чисел>>
  <<напечатать результат>>
#+end_src

Программа состоит из трех основных частей. Чтение файла и печать
результата — обслуживающий код, основная работа же производится в
блоке "рассчитать сумму чисел".

Нам нужно прочитать каждую строку в  файле и извлечь из нее число.
#+begin_src scheme :noweb yes :noweb-ref рассчитать сумму чисел
  (define (find-sum calibration-file)
    (for/sum ([line (in-lines calibration-file)])
          (read-number-from-line line)))
#+end_src

Вся сложность заключена в структуре строки — это случайный набор букв
и цифр, и для составления числа нам нужно взять только первую и
последнюю цифру в строке.

Чтобы это провернуть, мы сначала выделяем из строки все числа, затем
извлекаем первый и последний элементы из полученного списка. Так мы
получим пару для конкатенации и последующих преобразований.

#+begin_quote
Этот алгоритм можно оптимизировать, например, если при чтении первой
цифры запоминать ее как последнюю, и парсить значения в один
проход. Императивно, такая задача решается просто, но вот как это
сделать в Racket -- я сходу не придумал.
#+end_quote

#+caption: рассчитать сумму чисел
#+begin_src scheme :noweb-ref рассчитать сумму чисел :noweb yes
  (define (read-number-from-line line)
    (let* ([digits (extract-digits-from-line line)]
           [first-digit (car digits)]
           [last-digit (last digits)]
           )
    (string->number
     (string-append first-digit last-digit))))

  (define (extract-digits-from-line line)
    (for/list
        ([c (in-string line)] #:when (char-numeric? c))
      (string c)))
#+end_src

IO-операции здесь тривиальны и не представляют особого
интереса. Тут мы обошлись чтением файла и функцией печати строки.

#+begin_src scheme :noweb-ref прочитать файл
  (define (calculate-correction-value)
    (call-with-input-file "./inputs/1/input"
      find-sum))
#+end_src

#+name: напечатать результат
#+begin_src scheme :results output
  (displayln (calculate-correction-value))
#+end_src

* Часть 2. Условие
Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid "digits".

Equipped with this new information, you now need to find the real first and last digit on each line. For example:

#+begin_example
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
#+end_example

In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.

What is the sum of all of the calibration values?

** Решение.
Как ни странно, но структура программы практически не меняется.
Единственное изменение касается функции извлечения цифр из
строки. Во-первых, для перевода строки в число нам понадобится таблица
для трансляции словесных числительных в цифры. Во-вторых, если в
предыдущей версии мы проходили строку посимвольно, то в данном случае
нам необходимо воспользоваться поиском по подстроке.

Возьмем для этого регулярные выражения. Не будем заморачиваться с
попытками запихнуть поиск обоих чисел в одну регулярку, а просто
напишем две: обычный поиск числительного, тогда нам вернется
первое вхождение, и та же регулярка, но с модификатором ~$~, который
вернет последнее вхождение числительного.

#+begin_quote
На этом куске я подзавис, когда решал, потому что пытался построить
одну регулярку, чтобы распарсить все возможные числительные. Частный
пример превентивной оптимизации -- и явная ошибка. При том, что дизайн
программы явно указывает, что извлекать первое и последнее число нужно
по-одному.

Во-многом, к правильному решению я вернулся как раз за счет дизайна,
вспомнив о разветвлении в структуре программы, сохранившимся с первой
версии задачи.
#+end_quote

#+begin_src scheme :noweb-ref рассчитать сумму чисел
  (define translation-table
    (make-hash
     '(("one" . "1")
     ("two" . "2")
     ("three" . "3")
     ("four" . "4")
     ("five" . "5")
     ("six" . "6")
     ("seven" . "7")
     ("eight" . "8")
     ("nine" . "9")
     ("zero" . "0"))
     ))

  (define digits
    "one|two|three|four|five|six|seven|eight|nine|zero|\\d")

  (define digits-re (pregexp digits))

  (define last-digit-re
    ;; Пассаж с вопросительным знаком группирует все символы вплоть до последнего вхождения.
    ;; Это позволяет извлечь самое крайнее числительное в ряду.
    (pregexp (string-append "(?s:.*)(" digits ")")))

  (define (transform-digit digit-str)
    (if (char-numeric? (string-ref digit-str 0))
        digit-str
        (hash-ref translation-table digit-str)))

  (define (extract-digits-from-line line)
    (map transform-digit (list
     (car (regexp-match digits-re line))         ; Первая цифра
     (last (regexp-match last-digit-re line)))))   ; Вторая цифра
#+end_src
